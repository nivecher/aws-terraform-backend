name: Deploy Terraform Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
        type: string
      stack_name:
        description: 'CloudFormation stack name'
        required: false
        type: string
      state_bucket_name:
        description: 'Custom S3 bucket name for Terraform state (optional)'
        required: false
        type: string
      lock_table_name:
        description: 'Custom DynamoDB table name for state locking (optional)'
        required: false
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  STACK_NAME: ${{ github.event.inputs.stack_name || 'terraform-backend' }}
  PROJECT: 'terraform-backend'
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          gem install cfn-nag

      - name: Run cfn-lint
        run: cfn-lint cloudformation/*

      - name: Run cfn_nag_scan
        run: cfn_nag_scan --input-path cloudformation/

  deploy:
    name: Deploy
    needs: lint
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          gem install cfn-nag

      - name: Deploy CloudFormation Stack
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh \
            --stack-name "${{ env.STACK_NAME }}-${{ env.ENVIRONMENT }}" \
            --region "${{ env.AWS_REGION }}" \
            --environment "${{ env.ENVIRONMENT }}" \
            --project "${{ env.PROJECT }}" \
            ${{ github.event.inputs.state_bucket_name && format('--state-bucket-name {0}', github.event.inputs.state_bucket_name) || '' }} \
            ${{ github.event.inputs.lock_table_name && format('--lock-table-name {0}', github.event.inputs.lock_table_name) || '' }}

      - name: Get Stack Outputs
        if: always()
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws cloudformation describe-stacks \
            --stack-name "${{ env.STACK_NAME }}-${{ env.ENVIRONMENT }}" \
            --query 'Stacks[0].Outputs[*].{Key:OutputKey,Value:OutputValue,ExportName:ExportName}' \
            --output table \
            --region "${{ env.AWS_REGION }}" || true
